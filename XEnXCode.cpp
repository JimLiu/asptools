
#include "stdafx.h"
#include "XEncoding.h"

#include <openssl\md5.h>


static char s_xcodetab[20][100] = 
{
	29, 30, 93, 56, 31, 51, 60, 52, 10, 83, 4, 9, 85, 19, 80, 12, 23, 61, 28, 7, 66, 14, 78, 18, 71, 73, 98, 92, 63, 45, 22, 74, 33, 64, 99, 47, 72, 58, 3, 24, 91, 20, 76, 77, 82, 26, 36, 54, 46, 6, 65, 21, 2, 8, 34, 59, 96, 75, 49, 62, 32, 67, 48, 1, 40, 39, 53, 86, 90, 16, 89, 27, 79, 37, 25, 13, 57, 81, 50, 42, 41, 15, 88, 38, 35, 95, 55, 69, 68, 97, 11, 43, 44, 0, 70, 94, 84, 17, 5, 87, 
	93, 63, 52, 38, 10, 98, 49, 19, 53, 11, 8, 90, 15, 75, 21, 81, 69, 97, 23, 13, 41, 51, 30, 16, 39, 74, 45, 71, 18, 0, 1, 4, 60, 32, 54, 84, 46, 73, 83, 65, 64, 80, 79, 91, 92, 29, 48, 35, 62, 58, 78, 5, 7, 66, 47, 86, 3, 76, 37, 55, 6, 17, 59, 28, 33, 50, 20, 61, 88, 87, 94, 24, 36, 25, 31, 57, 42, 43, 22, 72, 14, 77, 44, 9, 96, 12, 67, 99, 82, 70, 68, 40, 27, 2, 95, 85, 56, 89, 26, 34, 
	77, 66, 31, 42, 47, 73, 94, 56, 98, 79, 9, 28, 74, 96, 68, 32, 17, 38, 37, 3, 93, 18, 64, 87, 49, 4, 27, 69, 82, 36, 0, 25, 19, 88, 44, 97, 34, 95, 30, 6, 21, 24, 63, 58, 45, 16, 62, 75, 14, 29, 71, 52, 50, 99, 55, 76, 80, 1, 48, 91, 53, 92, 54, 12, 11, 39, 67, 7, 43, 23, 51, 60, 40, 84, 15, 72, 89, 35, 26, 2, 41, 46, 86, 81, 8, 61, 57, 83, 65, 22, 90, 59, 10, 70, 33, 78, 13, 5, 85, 20, 
	30, 57, 79, 19, 25, 97, 39, 67, 84, 10, 92, 64, 63, 96, 48, 74, 45, 16, 21, 32, 99, 40, 89, 69, 41, 31, 78, 26, 11, 49, 38, 2, 15, 94, 36, 77, 29, 18, 17, 65, 72, 80, 3, 68, 34, 44, 81, 4, 58, 24, 52, 70, 51, 60, 62, 54, 7, 86, 43, 91, 71, 85, 46, 42, 22, 88, 1, 66, 14, 27, 93, 50, 75, 5, 12, 47, 55, 0, 95, 9, 56, 83, 28, 87, 73, 98, 82, 23, 33, 76, 90, 59, 61, 20, 6, 37, 13, 35, 8, 53, 
	6, 38, 54, 71, 67, 84, 92, 52, 65, 9, 58, 20, 56, 25, 53, 87, 51, 2, 55, 57, 5, 91, 69, 37, 35, 39, 73, 36, 80, 13, 82, 60, 27, 0, 28, 48, 45, 50, 24, 15, 97, 76, 77, 47, 42, 86, 63, 10, 46, 41, 17, 93, 3, 40, 83, 98, 78, 23, 62, 11, 7, 88, 32, 22, 66, 19, 90, 70, 21, 94, 8, 44, 26, 29, 95, 31, 99, 89, 49, 4, 72, 64, 18, 96, 30, 16, 34, 79, 61, 33, 75, 14, 59, 68, 1, 43, 85, 81, 74, 12, 
	33, 94, 17, 52, 79, 20, 0, 60, 70, 9, 47, 59, 99, 29, 91, 39, 85, 50, 82, 65, 11, 68, 63, 57, 38, 13, 72, 32, 34, 73, 84, 75, 62, 89, 86, 24, 27, 23, 1, 25, 53, 49, 44, 95, 71, 36, 48, 43, 35, 78, 37, 16, 7, 14, 2, 18, 12, 19, 10, 92, 31, 88, 58, 46, 81, 8, 64, 4, 93, 22, 67, 3, 80, 26, 98, 90, 41, 42, 56, 87, 28, 97, 30, 54, 5, 96, 45, 15, 61, 77, 66, 21, 6, 51, 69, 74, 83, 40, 55, 76, 
	6, 90, 4, 57, 14, 99, 58, 98, 77, 89, 51, 56, 16, 35, 71, 5, 82, 36, 94, 10, 84, 69, 62, 65, 44, 86, 41, 93, 3, 61, 39, 9, 47, 38, 32, 18, 95, 72, 22, 53, 8, 80, 52, 11, 76, 96, 42, 92, 54, 34, 81, 33, 74, 1, 2, 50, 48, 28, 79, 45, 12, 7, 87, 67, 64, 59, 85, 70, 17, 66, 60, 83, 27, 37, 15, 31, 43, 29, 21, 26, 40, 88, 68, 63, 19, 25, 91, 13, 75, 23, 49, 55, 46, 24, 78, 0, 97, 73, 20, 30, 
	95, 53, 54, 28, 2, 15, 0, 61, 40, 31, 19, 43, 60, 87, 4, 74, 12, 68, 35, 84, 98, 78, 38, 89, 93, 85, 79, 72, 57, 77, 99, 75, 34, 51, 49, 13, 17, 73, 33, 30, 80, 26, 46, 76, 24, 59, 92, 32, 56, 90, 55, 10, 42, 39, 48, 91, 11, 3, 6, 65, 70, 29, 22, 83, 64, 23, 69, 63, 82, 21, 67, 14, 37, 97, 52, 88, 44, 8, 94, 58, 41, 50, 16, 71, 20, 66, 25, 62, 81, 9, 1, 86, 47, 27, 18, 36, 45, 96, 7, 5, 
	36, 78, 63, 74, 58, 24, 94, 44, 41, 17, 65, 61, 22, 40, 2, 47, 32, 33, 89, 62, 93, 77, 35, 11, 80, 50, 85, 0, 42, 96, 76, 81, 13, 34, 31, 23, 46, 51, 6, 5, 18, 12, 75, 7, 56, 45, 20, 68, 54, 97, 37, 86, 83, 15, 14, 70, 55, 71, 92, 59, 67, 43, 53, 52, 39, 1, 87, 84, 60, 66, 25, 26, 21, 27, 95, 9, 64, 28, 72, 16, 48, 30, 98, 82, 3, 29, 69, 91, 79, 99, 88, 10, 90, 8, 4, 38, 73, 19, 57, 49, 
	27, 65, 14, 84, 94, 39, 38, 43, 93, 75, 91, 23, 41, 32, 54, 53, 79, 9, 40, 97, 46, 72, 12, 35, 5, 70, 71, 73, 77, 85, 81, 34, 16, 17, 33, 22, 0, 50, 95, 64, 13, 8, 28, 61, 7, 45, 36, 15, 80, 99, 25, 37, 63, 62, 48, 56, 44, 98, 4, 59, 68, 11, 19, 2, 76, 10, 69, 60, 47, 86, 55, 57, 78, 96, 3, 42, 30, 21, 1, 88, 24, 31, 83, 52, 67, 26, 51, 66, 90, 18, 92, 87, 58, 20, 6, 74, 29, 49, 82, 89, 
	35, 89, 52, 79, 88, 15, 46, 65, 60, 42, 72, 45, 73, 36, 20, 77, 99, 26, 25, 62, 8, 43, 47, 21, 94, 86, 55, 96, 82, 64, 41, 81, 9, 98, 10, 85, 54, 44, 14, 17, 66, 16, 69, 34, 27, 6, 0, 90, 5, 56, 92, 49, 38, 11, 51, 40, 13, 2, 67, 57, 61, 97, 31, 50, 3, 29, 7, 32, 30, 78, 63, 84, 24, 58, 93, 48, 53, 18, 91, 37, 1, 87, 33, 4, 71, 12, 95, 23, 19, 74, 28, 22, 59, 39, 83, 68, 70, 75, 80, 76, 
	46, 80, 57, 64, 83, 48, 45, 66, 20, 32, 34, 53, 85, 56, 38, 5, 41, 39, 77, 88, 14, 23, 91, 87, 72, 18, 17, 44, 90, 65, 68, 62, 67, 82, 43, 0, 13, 79, 52, 93, 55, 30, 9, 21, 37, 11, 6, 22, 75, 51, 63, 54, 2, 76, 36, 26, 49, 59, 73, 92, 8, 60, 19, 70, 29, 7, 40, 58, 95, 42, 96, 84, 10, 12, 89, 97, 99, 15, 69, 3, 98, 31, 28, 94, 71, 35, 25, 81, 4, 1, 47, 78, 50, 74, 24, 86, 27, 61, 33, 16, 
	91, 93, 37, 24, 14, 1, 60, 40, 82, 50, 41, 73, 78, 76, 81, 42, 16, 98, 6, 47, 10, 39, 68, 44, 19, 66, 38, 99, 86, 52, 92, 31, 59, 79, 62, 29, 15, 72, 83, 96, 90, 74, 11, 94, 8, 20, 69, 22, 80, 88, 7, 43, 95, 56, 3, 67, 21, 77, 55, 46, 36, 70, 64, 18, 28, 63, 45, 26, 0, 65, 54, 5, 87, 32, 49, 2, 4, 9, 71, 61, 35, 34, 53, 51, 13, 75, 58, 30, 84, 27, 17, 89, 48, 85, 33, 97, 12, 23, 57, 25, 
	68, 5, 75, 54, 76, 71, 18, 50, 44, 77, 20, 42, 96, 84, 4, 36, 16, 90, 63, 24, 45, 56, 47, 97, 3, 99, 67, 89, 64, 35, 87, 31, 73, 94, 81, 80, 60, 2, 26, 21, 7, 10, 15, 51, 23, 66, 59, 19, 92, 74, 9, 83, 29, 82, 70, 58, 53, 98, 86, 32, 6, 79, 34, 65, 62, 69, 25, 55, 22, 46, 61, 78, 37, 11, 41, 85, 13, 57, 12, 33, 48, 14, 8, 38, 88, 93, 28, 72, 49, 91, 40, 0, 30, 1, 43, 52, 39, 95, 17, 27, 
	57, 19, 7, 69, 90, 72, 35, 44, 88, 77, 30, 71, 91, 5, 70, 1, 89, 98, 3, 2, 65, 97, 17, 74, 59, 10, 15, 18, 58, 67, 83, 68, 73, 14, 6, 11, 81, 13, 47, 48, 60, 40, 9, 29, 95, 76, 82, 64, 87, 27, 42, 21, 20, 38, 16, 45, 54, 26, 22, 32, 46, 56, 75, 41, 4, 43, 94, 8, 28, 50, 23, 31, 37, 79, 51, 53, 55, 12, 39, 33, 61, 96, 86, 85, 63, 52, 34, 25, 78, 92, 36, 99, 24, 84, 80, 62, 66, 0, 93, 49, 
	97, 15, 19, 18, 64, 13, 34, 2, 67, 42, 25, 35, 77, 37, 33, 26, 54, 22, 27, 1, 52, 51, 58, 70, 92, 87, 57, 49, 68, 43, 10, 71, 59, 79, 86, 6, 90, 72, 53, 78, 41, 63, 50, 65, 7, 55, 60, 38, 39, 99, 69, 74, 85, 75, 56, 76, 61, 0, 28, 24, 40, 80, 95, 84, 47, 20, 96, 29, 31, 3, 14, 11, 5, 32, 23, 62, 45, 9, 88, 73, 94, 36, 46, 30, 93, 83, 82, 48, 8, 16, 4, 12, 89, 98, 66, 44, 81, 21, 17, 91, 
	51, 80, 77, 52, 82, 58, 47, 56, 28, 21, 8, 69, 39, 76, 48, 32, 83, 93, 90, 49, 4, 54, 24, 36, 29, 57, 9, 73, 61, 60, 53, 23, 55, 97, 88, 99, 3, 18, 91, 42, 85, 22, 96, 44, 70, 43, 1, 12, 16, 46, 81, 0, 20, 34, 6, 5, 30, 41, 11, 37, 98, 59, 84, 94, 38, 10, 40, 72, 86, 17, 31, 74, 33, 62, 35, 79, 75, 7, 27, 67, 89, 13, 45, 66, 65, 50, 68, 19, 71, 14, 25, 95, 2, 63, 87, 26, 78, 15, 92, 64, 
	51, 46, 92, 36, 20, 55, 54, 77, 10, 26, 65, 58, 47, 81, 89, 97, 48, 69, 37, 87, 52, 9, 41, 31, 22, 90, 95, 78, 8, 24, 56, 70, 15, 72, 53, 74, 23, 59, 64, 12, 66, 57, 39, 45, 43, 82, 49, 6, 14, 19, 85, 0, 3, 30, 21, 32, 7, 25, 5, 61, 29, 28, 73, 93, 99, 84, 83, 79, 86, 11, 44, 88, 67, 27, 71, 76, 13, 2, 96, 75, 1, 50, 4, 16, 62, 40, 68, 94, 34, 80, 18, 38, 98, 17, 63, 91, 42, 33, 60, 35, 
	32, 84, 1, 47, 54, 94, 79, 77, 36, 23, 41, 48, 91, 39, 67, 17, 58, 20, 99, 28, 49, 51, 31, 97, 10, 4, 50, 35, 30, 3, 21, 29, 16, 65, 56, 43, 81, 44, 70, 85, 38, 71, 9, 53, 5, 7, 59, 74, 52, 2, 87, 55, 82, 25, 78, 73, 62, 46, 6, 15, 8, 69, 37, 22, 90, 33, 14, 11, 27, 42, 72, 66, 18, 34, 86, 88, 19, 24, 75, 61, 13, 63, 93, 98, 0, 45, 40, 80, 57, 12, 95, 89, 68, 76, 64, 96, 26, 83, 92, 60, 
	84, 2, 49, 29, 25, 44, 58, 45, 60, 42, 24, 67, 89, 80, 66, 59, 32, 15, 72, 76, 17, 30, 63, 9, 77, 53, 96, 68, 19, 31, 28, 22, 0, 65, 73, 27, 8, 62, 40, 13, 86, 10, 69, 35, 37, 85, 57, 3, 11, 20, 26, 21, 48, 43, 4, 51, 34, 88, 16, 46, 99, 79, 56, 81, 94, 33, 71, 14, 92, 61, 38, 41, 70, 55, 47, 78, 93, 7, 54, 6, 87, 36, 52, 97, 1, 39, 74, 50, 75, 91, 64, 12, 98, 82, 5, 90, 95, 23, 83, 18
};

STDMETHODIMP CXEncoding::XCodeEncode(BSTR codeString, BSTR key, BSTR *retVal)
{
	WCHAR cString[20];
	int len = ::SysStringLen(codeString);
	int i, j, p, p1, n, n1, nbase;
	MD5_CTX mdata;
	unsigned char d[MD5_DIGEST_LENGTH];

	for(i = 0, p = 0; i < len; i ++)
	{
		if(codeString[i] >= '0' && codeString[i] <= '9')
		{
			cString[p ++] = codeString[i];
			if(p > 12)
				return E_INVALIDARG;
		}
	}

	if(p < 12)
		return E_INVALIDARG;

	MD5_Init(&mdata);
	MD5_Update(&mdata, cString, 24);
	MD5_Update(&mdata, key, ::SysStringByteLen(key));
	MD5_Update(&mdata, "西祠大市口", 10);
	MD5_Final(d, &mdata);

	n = (int)(((__int64)*(DWORD*)d) * 10000 >> 32);
	nbase = (n / 100 + n % 100) % 100;

	cString[p ++] = n / 1000 + '0';
	n %= 1000;
	cString[p ++] = n / 100 + '0';
	n %= 100;
	cString[p ++] = n / 10 + '0';
	n %= 10;
	cString[p] = n + '0';

	MD5_Init(&mdata);
	MD5_Update(&mdata, cString, 8);
	MD5_Update(&mdata, cString + 12, 8);
	MD5_Update(&mdata, "西祠胡同啊", 10);
	MD5_Final(d, &mdata);

	n1 = (cString[2] - '0') * 10 + cString[3] - '0';
	for(i = 3; i >= 0; i --)
	{
		n = s_xcodetab[(cString[12 + i] - '0') * 2][((cString[4 + i * 2] - '0') * 10 + (cString[5 + i * 2] - '0') + n1 + nbase + (d[i] * 100 >> 8)) % 100];
		cString[4 + i * 2] = n / 10 + '0';
		cString[5 + i * 2] = n % 10 + '0';
		n1 = n;
	}

	p1 = 18;

	for(j = 0; j < 3; j ++)
	{
		for(i = 0; i < 4; i ++)
			cString[p1 --] = cString[p --];
		cString[p1 --] = ' ';
	}

	*retVal = ::SysAllocStringLen(cString, 19);

	return S_OK;
}

STDMETHODIMP CXEncoding::XCodeDecode(BSTR codeString, VARIANT key, BSTR *retVal)
{
	WCHAR cString[20];
	int len = ::SysStringLen(codeString);
	int i, j, p, p1, n, n1, n2, nbase;
	MD5_CTX mdata;
	unsigned char d[MD5_DIGEST_LENGTH];
	CXString strKey;

	for(i = 0, p = 0; i < len; i ++)
	{
		if(codeString[i] >= '0' && codeString[i] <= '9')
		{
			cString[p ++] = codeString[i];
			if(p > 16)
				return S_OK;
		}
	}

	if(p < 16)
		return S_OK;

	nbase = (((cString[12] - '0') * 10 + cString[13] - '0') + ((cString[14] - '0') * 10 + cString[15] - '0')) % 100;

	MD5_Init(&mdata);
	MD5_Update(&mdata, cString, 8);
	MD5_Update(&mdata, cString + 12, 8);
	MD5_Update(&mdata, "西祠胡同啊", 10);
	MD5_Final(d, &mdata);

	n1 = (cString[2] - '0') * 10 + cString[3] - '0';
	for(i = 3; i >= 0; i --)
	{
		n2 = (cString[4 + i * 2] - '0') * 10 + (cString[5 + i * 2] - '0');
		n = (s_xcodetab[(cString[12 + i] - '0') * 2 + 1][n2] + 300 - n1 - nbase - (d[i] * 100 >> 8)) % 100;
		cString[4 + i * 2] = n / 10 + '0';
		cString[5 + i * 2] = n % 10 + '0';
		n1 = n2;
	}

	varGetString(key, strKey);
	if(!strKey.IsEmpty())
	{
		MD5_Init(&mdata);
		MD5_Update(&mdata, cString, 24);
		MD5_Update(&mdata, (LPCWSTR)strKey, strKey.GetLength() * 2);
		MD5_Update(&mdata, "西祠大市口", 10);
		MD5_Final(d, &mdata);

		n = (int)(((__int64)*(DWORD*)d) * 10000 >> 32);
		n1 = (cString[12] - '0') * 1000 + (cString[13] - '0') * 100 + (cString[14] - '0') * 10 + (cString[15] - '0');
		if(n != n1)
			return S_OK;
	}

	p1 = 13;
	p = 11;

	for(j = 0; j < 2; j ++)
	{
		for(i = 0; i < 4; i ++)
			cString[p1 --] = cString[p --];
		cString[p1 --] = ' ';
	}

	*retVal = ::SysAllocStringLen(cString, 14);

	return S_OK;
}


